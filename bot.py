import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram import F

import os

TOKEN = os.getenv('8337898993:AAGlATM17_cUZxY_vLxYMJE2dO2pFdx_ngg')
bot = Bot(token=TOKEN)
dp = Dispatcher()

waiting = []
pairs = {}
active_timers = {}

CHAT_DURATION = 300  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö


async def end_chat(user1, user2):
    pairs.pop(user1, None)
    pairs.pop(user2, None)
    active_timers.pop(user1, None)
    active_timers.pop(user2, None)
    try:
        await bot.send_message(user1, "‚è∞ –í—Ä–µ–º—è —á–∞—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å. –î–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –Ω–∞–ø–∏—à–∏ /start")
    except:
        pass
    try:
        await bot.send_message(user2, "‚è∞ –í—Ä–µ–º—è —á–∞—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å. –î–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –Ω–∞–ø–∏—à–∏ /start")
    except:
        pass
    if user1 not in waiting:
        waiting.append(user1)
    if user2 not in waiting:
        waiting.append(user2)
    await try_match()


async def start_timer(user1, user2):
    await asyncio.sleep(CHAT_DURATION)
    if pairs.get(user1) == user2 and pairs.get(user2) == user1:
        await end_chat(user1, user2)


async def try_match():
    while len(waiting) >= 2:
        user1 = waiting.pop(0)
        user2 = waiting.pop(0)
        pairs[user1] = user2
        pairs[user2] = user1

        await bot.send_message(user1, "ü§´ –ü–∞—Ä—Ç–Ω—ë—Ä –Ω–∞–π–¥–µ–Ω! –ß–∞—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã–π. –ü–∏—à–∏ —Å—é–¥–∞. –£ –≤–∞—Å –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç.")
        await bot.send_message(user2, "ü§´ –ü–∞—Ä—Ç–Ω—ë—Ä –Ω–∞–π–¥–µ–Ω! –ß–∞—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã–π. –ü–∏—à–∏ —Å—é–¥–∞. –£ –≤–∞—Å –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç.")

        task = asyncio.create_task(start_timer(user1, user2))
        active_timers[user1] = task
        active_timers[user2] = task


@dp.message(Command("start"))
async def start_handler(message: Message):
    user_id = message.from_user.id
    if user_id in pairs:
        await message.answer("–¢—ã —É–∂–µ –≤ —á–∞—Ç–µ. –ü–∏—à–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏ —á–∞—Ç –∫–æ–º–∞–Ω–¥–æ–π /stop")
        return
    if user_id in waiting:
        await message.answer("–¢—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏, –∂–¥–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
        return

    waiting.append(user_id)
    await message.answer("–¢—ã –≤ –æ—á–µ—Ä–µ–¥–∏, –∂–¥–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
    await try_match()


@dp.message(Command("stop"))
async def stop_handler(message: Message):
    user_id = message.from_user.id
    if user_id in pairs:
        partner_id = pairs.pop(user_id)
        pairs.pop(partner_id, None)

        task = active_timers.pop(user_id, None)
        if task:
            task.cancel()
        active_timers.pop(partner_id, None)

        await bot.send_message(user_id, "–ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π ‚Äî /start")
        await bot.send_message(partner_id, "–ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π ‚Äî /start")

        if partner_id not in waiting:
            waiting.append(partner_id)
            await try_match()
    else:
        if user_id in waiting:
            waiting.remove(user_id)
            await message.answer("–¢—ã –≤—ã—à–µ–ª –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")
        else:
            await message.answer("–¢—ã –Ω–µ –≤ —á–∞—Ç–µ –∏ –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏.")


@dp.message(F.text)
async def relay_message(message: Message):
    user_id = message.from_user.id
    if user_id in pairs:
        partner_id = pairs[user_id]
        text = message.text
        if not text:
            return
        try:
            await bot.send_message(partner_id, f"üë§ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫: {text}")
        except:
            await end_chat(user_id, partner_id)
    else:
        await message.answer("–¢—ã –Ω–µ –≤ —á–∞—Ç–µ. –ù–∞—á–Ω–∏ –Ω–æ–≤—ã–π /start")


async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    import asyncio
    asyncio.run(main())
